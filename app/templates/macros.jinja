{# render form input #}
{% macro render_input(input) %}
  {% set css_class     = kwargs["class"]         if "class" in kwargs         else "" %}
  {% set wrapper_class = kwargs["wrapper_class"] if "wrapper_class" in kwargs else "" %}
  {% set css_class     = kwargs["class"]         if "class" in kwargs         else "" %}
  {% set value         = kwargs["value"]         if "value" in kwargs         else input.default %}
  {% set value         = value                   if value != None           else "" %}
  {% set title         = kwargs["title"]         if "title" in kwargs         else input.description%}
  {% set prefix = kwargs['prefix'] %}
  {% set suffix = kwargs['suffix'] %}

  {% if input.type == "BooleanField" %}
    {% set value = "1" %}
  {% endif %}

  {% set required    = "required"          if input.flags.required else ""%}
  {% set placeholder = kwargs["placeholder"] if "placeholder" in kwargs else ""%}

  {# use default rendering for submit and hidden csrftoken #}
  {% if input.type in ["SubmitField", "CSRFTokenField", "HiddenField"] %}
    {{input()}} 
  {% elif required %}
    {% set type = wtf_type_types[input.type] if input.type in wtf_type_types else "text" %}
    {# for all other types, wrap in a wrapper and allow attributes passed in above #}
    {{prefix}}
    <div class="form-input-wrapper {{input.name}} {{wrapper_class}} required">
      {{input.label}}
      {{input(id=input.id,
              class="form-input " + input.name + " " + css_class,
              placeholder=placeholder,
              value=value,
              required=required,
              title=title)
      }}
    </div>
    {{suffix}}
  {% else %}
    {{prefix}}
    <div class="form-input-wrapper {{input.name}} {{wrapper_class}}">
      {{input.label}}
      {{input(id=input.id,
              class="form-input " + input.name + " " + css_class,
              placeholder=placeholder,
              value=value,
              title=title)
      }}
    </div>
    {{suffix}}
  {% endif %}
{% endmacro %}

{# render form #}
{% macro render_form(form) %}
  {% set title  = kwargs["title"] if "title" in kwargs else None %}
  {% set action = kwargs["action"] if "action" in kwargs else "" %}
  {% set method = kwargs["method"] if "method" in kwargs else "POST"%}
  {% set enctype = kwargs["enctype"] if "enctype" in kwargs else "application/x-www-form-urlencoded"%}
  {% set data_controller = kwargs["data_controller"] if "data_controller" in kwargs else None %}
  {% set data_controller = "data-controller=\""+ data_controller +"\"" if data_controller else "" %}
  {% set form_class = kwargs["form_class"] if "form_class" in kwargs else ""%}

  {# mappings of input names to HTML prefixes and suffixes#}
  {% set prefix_map = kwargs["prefix_map"]   if "prefix_map" in kwargs else {} %}
  {% set suffix_map = kwargs["suffix_map"]   if "suffix_map" in kwargs else {} %}

  {% set input_class_map   = kwargs["input_class_map"]   if "input_class_map"   in kwargs else {} %}
  {% set wrapper_class_map = kwargs["wrapper_class_map"] if "wrapper_class_map" in kwargs else {} %}

  <form class="{{form_class}}" {{data_controller}} enctype="{{enctype}}" method="{{method}}" action="{{action}}">
    {% if form.errors %}
      {% for reason, message in form.errors.items() %}
        <div class="message error {{reason}}">{{message}}</div> 
      {% endfor %}
    {% endif %}
    {% if title != None %}
      <h3>{{title}}</h3>
    {% endif %}
    {% for input in form %}
      {% set value = input.data or None %}
      {% set input_class   = input_class_map[input.name]   if input.name in input_class_map else   "" %}
      {% set prefix        = prefix_map[input.name]        if input.name in prefix_map else "" %}
      {% set suffix        = suffix_map[input.name]        if input.name in suffix_map else "" %}
      {% set input_class   = input_class_map[input.name]   if input.name in input_class_map else   "" %}
      {% set wrapper_class = wrapper_class_map[input.name] if input.name in wrapper_class_map else "" %}
      {{ render_input(input, value=value, class=input_class, prefix=prefix, suffix=suffix, wrapper_class=wrapper_class)}}
    {% endfor %}
  </form>
{% endmacro %}


# general purpose macro for extracting images from an entity. Assumes that
# there is a list of image urls on the entity. The title can be injected, as
# well as ownership of the entity to allow 'add picture' and 'remove' picture
# widgets.
{% macro get_entity_images(entity, id) %}
  
  {% set is_owner  = kwargs['is_owner'] if 'is_owner' in kwargs else False %}
  {% set title_key = kwargs['title_key'] if 'title_key' in kwargs else 'title'%}
  {% set title     = kwargs['title'] if 'title' in kwargs else entity[title_key] %}

  {# 
    deprecated - no longer implementing 
    the add or remove button due to time constraints
  #} 
  {% if False %}
    <div title="add new image for {{title}}" class="button add-image">Add Image</div>
  {% endif %}

  <div class="aggregate image">
    {% for image_url in entity.image_urls %}
    <div class="image-wrapper">
      {# Please note: these buttons will bind to an AJAX request to delete #}
      {# the entity image. these requests are validated server side that #}
      {# A.) the logged in user owns this entity #}
      {# B.) the request has a CSRF token #}
      {# 
        deprecated - no longer implementing 
        the add or remove button due to time constraints
      #} 
      {% if False %}
        <div title="delete image" class="button delete"></div>
      {% endif %}
      <div> 
        <img title="{{title}}" alt="{{title}}" src="{{image_url}}"/>
      </div>
    </div>
    {% endfor %}
  </div>
{% endmacro %}
